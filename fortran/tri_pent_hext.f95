! Triangle, pentagonal, and hexagonal numbers 
! are generated by the following
! formulae:

! Triangle     Tn=n(n+1)/2     1, 3, 6, 10, 15, ...
! Pentagonal   Pn=n(3n-1)/2    1, 5, 12, 22, 35, ...
! Hexagonal    Hn=n(2n-1)      1, 6, 15, 28, 45, ...

! It can be verified that:
! T[285] = P[165] = H[143] = 40755.

! Find the next triangle number that
! is also pentagonal and hexagonal.

! Project Euler: 45

! Answer: 1533776805 

program main

use euler

implicit none


        integer (int64), parameter :: START = 285 + 1;
        integer (int64) :: n, tri;

        n = START;

        do while(.TRUE.)

                tri = n;
                call triangle(tri);

                if(pentagonal(tri) .AND. hexagonal(tri)) then
                        goto 24;
                endif

                call inc(n, 1_int64);

        end do

24      CONTINUE

        call printint(tri);


contains


        pure subroutine triangle(n)

                integer (int64), intent(inout) :: n;
                n = (n ** 2 - n) / 2;

        end subroutine triangle


        ! Utilise the fact that we can test if a number is pentagonal or not by
        ! using: 24x + 1 == y;
        ! Where y is a perfect square. AND, for non generalised solutions of
        ! n >= 0, we also must qualify that (24x + 1)**0.5 % 6 == 5

        pure function pentagonal(x)

                integer (int64), intent(in) :: x;
                integer (int64) :: tmp;
                logical :: pentagonal;

                tmp = 24 * x + 1;
                
                pentagonal = (perfect_square(tmp) .AND. &
                        mod(int(sqrt(real(tmp))), 6) == 5)

        end function pentagonal


        pure function hexagonal(x)

                integer (int64), intent(in) :: x;
                integer (int64) :: tmp;
                logical :: hexagonal;

        end function hexagonal

        pure function is_natural(x)

                integer (int64), intent(in) :: x;
                logical :: is_

                return (abs(x - nint(x)) < 0.0005)

        end function is_natural


end program main

